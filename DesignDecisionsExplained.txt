	In designing our project, we had to make several decisions about what to implement and how to do so. The first level of success criteria asks for a web application that will allow users to input a ticker symbol from a list of predefined companies and scrape for articles about them. In completing this task, we decided to allow the user to input the ticker symbol of any company and get results, instead of just a list of predefined companies. This caused us to have to check the validity of each ticker symbol entered, but it also allows much more flexibility in the use of our application. In terms of where we decided to pull data from, we decided to use the RSS feeds for news from Bing (we initially used Google, but we got blocked from too much use). 
	The second success criteria asks that the user can define a date range for the articles. In designing our application, we decided to not implement this aspect, since it's impossible to search for articles from a specific date range (from what we found). The RSS feeds only gave us ten articles at a time, and therefore we did not have the capability to pull huge archives of articles that would allow us to have enough articles to specify a certain date range. Our application still shows dates, however it does not let the user pick specific ranges of dates to query. 
	The third success criteria asks for sentiment analysis to be performed on the articles. For this part of the problem, we accumulated list of positive and negative words, and searched each article we scraped for the frequency of each type of word in the article. Then, we compared the positive versus the negative and created a ratio that represented the sentiment. Because our list of positive words was longer, the data was initially positively biased, so we had to slightly skew the data negative in order to get an accurate reflection of the real sentiment. 
	We did also decide to add a graph at the end showing prices versus sentiment over time, since we already had that data. 

